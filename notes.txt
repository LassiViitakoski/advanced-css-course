Challenges after second project {
	-> Display some kind of user menu when hovering over the username in .user-nav
	-> Display a message menu when hovering over the chat icon in .user-nav (maybe like facebook)
	-> Display a box with search suggestions as soon as the user starts typing in the search field
	-> Create a caption for the .gallery__item with a nice hover effect
	-> Make the page 100% responsive even for viewport sizes below 500px, maybe even responsive images
}

Linkit codepen-harjoitteluihin:
	- Basics of sass: https://codepen.io/LassiViitakoski/pen/vYgQmBj
	- Basics of flexbox: https://codepen.io/LassiViitakoski/pen/MWJNKmK
	- Basics of Grid: https://codepen.io/LassiViitakoski/pen/MWpYBqQ

Komento live-serverin käynnistämiseen:
	- live-server ./public/exercise1

Ilmaisia hienoja kuvia -> unsplash.com
Ilmaisia background-videoita -> coverr.co
Cubic-bezier-omainaisuuksia = animaatioon itse tehtyjä ease-ominaisuuksia -> easings.net
Statistiikka, minkäkokoisia näyttöjä käytetään -> statcounter.com
Sivusto, jossa voi testa sivuston toimivuutta erilaisilla näyttöresoluutioilla -> sizzy.co
Sivusto, jossa voi testata tukevatko selaimet css omainaisuuksia -> caniuse.com
Sivusto svg-ikonien hakemiseen -> icomoon.io
Sivusto, josta löytyy css-llä tehtyjä html merkkejä -> https://css-tricks.com/snippets/html/glyphs/

em ja rem perustuvat fonttikokoon.
em (font) vertautuu parent-elementin fonttikokoon, jos parent element font-size = 16px ja laitetaan headeriin font-size: 3em => headerin font-size = 48px.
em (length)(padding, margins yms.) vertautuu nykyisen elementin fonttikokoon, jos headerin font-size = 48px ja laitetaan headeriin padding: 2em; => headerin padding = 96px.
rem vertautuu rootin fonttikokoon!

vh = viewport height, 10vh = 10% näytön korkeudesta.
vw = viewport width, 10vh = 10% näytön leveydestä.

%(font) vertautuvat parent-elementin fonttikokoon.
%(length) vertautuvat parent-elementin widthiin.

periytyvät elementit käyttävät parent-elementissä määritettyä font-sizea.

esim.

.parent {
	font-size: 20px;
	line-height: 150%;
}

.child {
	font-size: 25px;
}

=> child elementin line-height = 20px * 150% => 30px

ominaisuudet, jotka liittyvät textiin => periytyvät.

periytyviä ominaisuuksia : 
	- font-size
	- line-height
	- font-family
	- color

Box-sizing: border-box; -> Kun määrittelee widthin ja heightin elementille -> Korkeuteen ja pituuteen tulee mukaan padding ja border.

Z-index toimii vain, jos position on asetettu.

Imagen tulisi olla käytännössä aina display: block; tai display: inline-block;
	-> Muuten kuvan alareunaan jää pieni white-space

Imagen asettaminen tiettyyn tilaan muuttamatta aspect ratiota
	-> aseta imagelle width: 100%, height: 100%, display: block, object-fit: cover
	-> menee isäntäelementin kokoiseksi.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Flexbox-notes

Container -> Ensimmäiset vaihtoehdot oletuksena {

	flex-direcion: row | row-reverse | column | column-reverse

	flex-wrap: nowrap | wrap | wrap-reverse
		- Määrittää miten elementit flexboxin sisällä siirtyvät, jos flexboxilla ei ole riittävästi tilaa

	justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly
		- Määrittää, miten elementit sijoitetaan pääakselin (main axis) suhteen

	align-items: stretch | flex-start | flex-end | center | baseline
		- Määrittää, miten elementit sijoiteteaan läpiakselin (cross axis) suhteen

	align-content: stretch | flex-start | flex-end | center | space-between | space-around
		- Jos rivejä on monta, määrittää miten rivit sijoitetaan läpiakselin (cross axis) suhteen

}

margin-right | margin-left: auto -> Todella hyvä kikka, jos halutaan esim. kaksi elementtiä flex rown toiseen päähän ja kaksi toiseen päähän.

Item -> Ensimmäiset vaihtoehdot oletuksena {

	align-self: auto | stretch | flex-start | flex-end | center | baseline
		- Hyvin samanlainen kuin align-items, mutta yksittäiselle elementille

	order: 0 | <integer>
		- Määrää järjestyksen yksittäisille elementeille, hyvä skaalatessa pienemmille näytöille

	flex-grow: 0 | <integer> -------------------------------------> |
		- Määritetään, kuinka paljon elementti voi kasvaa			|
																	|
	flex-shrink: 1 | <integer> -----------------------------------> | -->---------> flex: 0 1 auto | <int> <int> <length>(40%)
		- Määritetään, kuinka paljon elementti voi pienentyä		|
																	|
	flex-basis: auto | <length> ----------------------------------> |
		- Määritetään base-width

}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Grid-notes

Grid-item -> Grid-cell
Grid-space -> Grid-area

Jokainen vaakarivi itemeitä -> Grid track/row
Jokainen pystyrivi itemeitä -> Grid track/column

Container -> Ensimmäiset vaihtoehdot oletuksena {

	1 -> {
		grid-template-rows -------------------------------------> |
															      |
		grid-template-columns ----------------------------------> | -->---------> grid-template
																  |
		grid-template-areas ------------------------------------> |
	}
	
	2 -> {
		grid-row-gap -------------------------------------> |
															| -->---------> grid-gap
		grid-column-gap ----------------------------------> | 
	}

	3 -> {
		justify-items: stretch | center | end | start
		align-items: stretch | center | end | start
		justify-content: start | center | end | space-between | space-around | space-evenly
		align-content: start | center | end | space-between | space-around | space-evenly
	}

	4 -> {
		grid-auto-rows
		grid-auto-columns
		grid-auto-flow: row | column | row dense | column dense -> jos gridiin on jäämässä tyhjiä aukkoja, dense täyttää ne
	}
}

Item -> {

	1 -> {
		grid-row-start -------------------------------------> |
															  | -->---> grid-row -------> |
		grid-row-end ---------------------------------------> | 						  |
																  						  | --->------> grid-area
		grid-column-start ----------------------------------> |						  	  |
													    	  | -->---> grid-column ----> |
		grid-column-end ------------------------------------> |											
	}

	2 -> {
		justify-self
		align-self
	}

	3 {
		order
	}
}